# standard imports
import unittest
import sys

# third party imports

# local imports
from scion.math import ChebyshevApproximation
from scion.math import IntervalDomain
from scion.math import OpenDomain

class Test_scion_math_ChebyshevApproximation( unittest.TestCase ) :
    """Unit test for the ChebyshevApproximation class."""

    def test_component( self ) :

        def verify_chunk_domain1( self, chunk ) :

            # verify content
            self.assertEqual( 10, chunk.order )

            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 0., chunk.coefficients[0] )
            self.assertAlmostEqual( 1., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )

            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -1., chunk.domain.lower_limit )
            self.assertEqual(  1., chunk.domain.upper_limit )

            # verify evaluation
            self.assertAlmostEqual( -1.0      , chunk( -1. ) )
            self.assertAlmostEqual( -0.9999999, chunk( -0.9999999 ) )
            self.assertAlmostEqual( -0.999999 , chunk( -0.999999 ) )
            self.assertAlmostEqual( -0.99999  , chunk( -0.99999 ) )
            self.assertAlmostEqual( -0.9999   , chunk( -0.9999 ) )
            self.assertAlmostEqual( -0.999    , chunk( -0.999 ) )
            self.assertAlmostEqual( -0.99     , chunk( -0.99 ) )
            self.assertAlmostEqual( -0.9      , chunk( -0.9 ) )
            self.assertAlmostEqual( -0.5      , chunk( -0.5 ) )
            self.assertAlmostEqual( -0.05     , chunk( -0.05 ) )
            self.assertAlmostEqual( -0.005    , chunk( -0.005 ) )
            self.assertAlmostEqual( -0.0005   , chunk( -0.0005 ) )
            self.assertAlmostEqual( -0.00005  , chunk( -0.00005 ) )
            self.assertAlmostEqual( -0.000005 , chunk( -0.000005 ) )
            self.assertAlmostEqual( -0.0000005, chunk( -0.0000005 ) )
            self.assertAlmostEqual(  0.0      , chunk(  0. ) )
            self.assertAlmostEqual( +0.0000005, chunk(  0.0000005 ) )
            self.assertAlmostEqual( +0.000005 , chunk(  0.000005 ) )
            self.assertAlmostEqual( +0.00005  , chunk(  0.00005 ) )
            self.assertAlmostEqual( +0.0005   , chunk(  0.0005 ) )
            self.assertAlmostEqual( +0.005    , chunk(  0.005 ) )
            self.assertAlmostEqual( +0.05     , chunk(  0.05 ) )
            self.assertAlmostEqual( +0.5      , chunk(  0.5 ) )
            self.assertAlmostEqual( +0.9      , chunk(  0.9 ) )
            self.assertAlmostEqual( +0.99     , chunk(  0.99 ) )
            self.assertAlmostEqual( +0.999    , chunk(  0.999 ) )
            self.assertAlmostEqual( +0.9999   , chunk(  0.9999 ) )
            self.assertAlmostEqual( +0.99999  , chunk(  0.99999 ) )
            self.assertAlmostEqual( +0.999999 , chunk(  0.999999 ) )
            self.assertAlmostEqual( +0.9999999, chunk(  0.9999999 ) )
            self.assertAlmostEqual( +1.0      , chunk(  1. ) )

            # verify domain comparison
            self.assertEqual( True, chunk.is_inside( -1. ) )
            self.assertEqual( True, chunk.is_inside(  0. ) )
            self.assertEqual( True, chunk.is_inside(  1. ) )

            self.assertEqual( False, chunk.is_contained( -1. ) )
            self.assertEqual( True, chunk.is_contained(  0. ) )
            self.assertEqual( False, chunk.is_contained(  1. ) )

            self.assertEqual( True, chunk.is_same_domain( IntervalDomain( -1., 1. ) ) )
            self.assertEqual( False, chunk.is_same_domain( IntervalDomain( 0., 1. ) ) )
            self.assertEqual( False, chunk.is_same_domain( OpenDomain() ) )

            # verify arithmetic operators
            small = ChebyshevApproximation( -1, 1, [ 3., 0., 1. ] )
            result = ChebyshevApproximation( -1, 1, [ 0. ] )

            result = -chunk
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual(  0., result.coefficients[0] )
            self.assertAlmostEqual( -1., result.coefficients[1] )
            self.assertAlmostEqual(  0., result.coefficients[2] )
            self.assertAlmostEqual(  0., result.coefficients[3] )
            self.assertAlmostEqual(  0., result.coefficients[4] )
            self.assertAlmostEqual(  0., result.coefficients[5] )
            self.assertAlmostEqual(  0., result.coefficients[6] )
            self.assertAlmostEqual(  0., result.coefficients[7] )
            self.assertAlmostEqual(  0., result.coefficients[8] )
            self.assertAlmostEqual(  0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -1., result.domain.lower_limit )
            self.assertEqual(  1., result.domain.upper_limit )

            chunk += 2.
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 2., chunk.coefficients[0] )
            self.assertAlmostEqual( 1., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -1., chunk.domain.lower_limit )
            self.assertEqual(  1., chunk.domain.upper_limit )

            chunk -= 2.
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 0., chunk.coefficients[0] )
            self.assertAlmostEqual( 1., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -1., chunk.domain.lower_limit )
            self.assertEqual(  1., chunk.domain.upper_limit )

            chunk += small
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 3., chunk.coefficients[0] )
            self.assertAlmostEqual( 1., chunk.coefficients[1] )
            self.assertAlmostEqual( 1., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -1., chunk.domain.lower_limit )
            self.assertEqual(  1., chunk.domain.upper_limit )

            chunk -= small
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 0., chunk.coefficients[0] )
            self.assertAlmostEqual( 1., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -1., chunk.domain.lower_limit )
            self.assertEqual(  1., chunk.domain.upper_limit )

            chunk *= 2.
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 0., chunk.coefficients[0] )
            self.assertAlmostEqual( 2., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -1., chunk.domain.lower_limit )
            self.assertEqual(  1., chunk.domain.upper_limit )

            chunk /= 2.
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 0., chunk.coefficients[0] )
            self.assertAlmostEqual( 1., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -1., chunk.domain.lower_limit )
            self.assertEqual(  1., chunk.domain.upper_limit )

            result = chunk + 2.
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 2., result.coefficients[0] )
            self.assertAlmostEqual( 1., result.coefficients[1] )
            self.assertAlmostEqual( 0., result.coefficients[2] )
            self.assertAlmostEqual( 0., result.coefficients[3] )
            self.assertAlmostEqual( 0., result.coefficients[4] )
            self.assertAlmostEqual( 0., result.coefficients[5] )
            self.assertAlmostEqual( 0., result.coefficients[6] )
            self.assertAlmostEqual( 0., result.coefficients[7] )
            self.assertAlmostEqual( 0., result.coefficients[8] )
            self.assertAlmostEqual( 0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -1., result.domain.lower_limit )
            self.assertEqual(  1., result.domain.upper_limit )

            result = 2. + chunk
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 2., result.coefficients[0] )
            self.assertAlmostEqual( 1., result.coefficients[1] )
            self.assertAlmostEqual( 0., result.coefficients[2] )
            self.assertAlmostEqual( 0., result.coefficients[3] )
            self.assertAlmostEqual( 0., result.coefficients[4] )
            self.assertAlmostEqual( 0., result.coefficients[5] )
            self.assertAlmostEqual( 0., result.coefficients[6] )
            self.assertAlmostEqual( 0., result.coefficients[7] )
            self.assertAlmostEqual( 0., result.coefficients[8] )
            self.assertAlmostEqual( 0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -1., result.domain.lower_limit )
            self.assertEqual(  1., result.domain.upper_limit )

            result = chunk - 2.
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( -2., result.coefficients[0] )
            self.assertAlmostEqual(  1., result.coefficients[1] )
            self.assertAlmostEqual(  0., result.coefficients[2] )
            self.assertAlmostEqual(  0., result.coefficients[3] )
            self.assertAlmostEqual(  0., result.coefficients[4] )
            self.assertAlmostEqual(  0., result.coefficients[5] )
            self.assertAlmostEqual(  0., result.coefficients[6] )
            self.assertAlmostEqual(  0., result.coefficients[7] )
            self.assertAlmostEqual(  0., result.coefficients[8] )
            self.assertAlmostEqual(  0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -1., result.domain.lower_limit )
            self.assertEqual(  1., result.domain.upper_limit )

            result = 2. - chunk
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual(  2., result.coefficients[0] )
            self.assertAlmostEqual( -1., result.coefficients[1] )
            self.assertAlmostEqual(  0., result.coefficients[2] )
            self.assertAlmostEqual(  0., result.coefficients[3] )
            self.assertAlmostEqual(  0., result.coefficients[4] )
            self.assertAlmostEqual(  0., result.coefficients[5] )
            self.assertAlmostEqual(  0., result.coefficients[6] )
            self.assertAlmostEqual(  0., result.coefficients[7] )
            self.assertAlmostEqual(  0., result.coefficients[8] )
            self.assertAlmostEqual(  0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -1., result.domain.lower_limit )
            self.assertEqual(  1., result.domain.upper_limit )

            result = chunk + small
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 3., result.coefficients[0] )
            self.assertAlmostEqual( 1., result.coefficients[1] )
            self.assertAlmostEqual( 1., result.coefficients[2] )
            self.assertAlmostEqual( 0., result.coefficients[3] )
            self.assertAlmostEqual( 0., result.coefficients[4] )
            self.assertAlmostEqual( 0., result.coefficients[5] )
            self.assertAlmostEqual( 0., result.coefficients[6] )
            self.assertAlmostEqual( 0., result.coefficients[7] )
            self.assertAlmostEqual( 0., result.coefficients[8] )
            self.assertAlmostEqual( 0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -1., result.domain.lower_limit )
            self.assertEqual(  1., result.domain.upper_limit )

            result = chunk - small
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( -3., result.coefficients[0] )
            self.assertAlmostEqual(  1., result.coefficients[1] )
            self.assertAlmostEqual( -1., result.coefficients[2] )
            self.assertAlmostEqual(  0., result.coefficients[3] )
            self.assertAlmostEqual(  0., result.coefficients[4] )
            self.assertAlmostEqual(  0., result.coefficients[5] )
            self.assertAlmostEqual(  0., result.coefficients[6] )
            self.assertAlmostEqual(  0., result.coefficients[7] )
            self.assertAlmostEqual(  0., result.coefficients[8] )
            self.assertAlmostEqual(  0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -1., result.domain.lower_limit )
            self.assertEqual(  1., result.domain.upper_limit )

            result = chunk * 2.
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 0., result.coefficients[0] )
            self.assertAlmostEqual( 2., result.coefficients[1] )
            self.assertAlmostEqual( 0., result.coefficients[2] )
            self.assertAlmostEqual( 0., result.coefficients[3] )
            self.assertAlmostEqual( 0., result.coefficients[4] )
            self.assertAlmostEqual( 0., result.coefficients[5] )
            self.assertAlmostEqual( 0., result.coefficients[6] )
            self.assertAlmostEqual( 0., result.coefficients[7] )
            self.assertAlmostEqual( 0., result.coefficients[8] )
            self.assertAlmostEqual( 0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -1., result.domain.lower_limit )
            self.assertEqual(  1., result.domain.upper_limit )

            result = 2. * chunk
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 0., result.coefficients[0] )
            self.assertAlmostEqual( 2., result.coefficients[1] )
            self.assertAlmostEqual( 0., result.coefficients[2] )
            self.assertAlmostEqual( 0., result.coefficients[3] )
            self.assertAlmostEqual( 0., result.coefficients[4] )
            self.assertAlmostEqual( 0., result.coefficients[5] )
            self.assertAlmostEqual( 0., result.coefficients[6] )
            self.assertAlmostEqual( 0., result.coefficients[7] )
            self.assertAlmostEqual( 0., result.coefficients[8] )
            self.assertAlmostEqual( 0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -1., result.domain.lower_limit )
            self.assertEqual(  1., result.domain.upper_limit )

            result = chunk / 2.
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 0.0, result.coefficients[0] )
            self.assertAlmostEqual( 0.5, result.coefficients[1] )
            self.assertAlmostEqual( 0.0, result.coefficients[2] )
            self.assertAlmostEqual( 0.0, result.coefficients[3] )
            self.assertAlmostEqual( 0.0, result.coefficients[4] )
            self.assertAlmostEqual( 0.0, result.coefficients[5] )
            self.assertAlmostEqual( 0.0, result.coefficients[6] )
            self.assertAlmostEqual( 0.0, result.coefficients[7] )
            self.assertAlmostEqual( 0.0, result.coefficients[8] )
            self.assertAlmostEqual( 0.0, result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -1., result.domain.lower_limit )
            self.assertEqual(  1., result.domain.upper_limit )

        def verify_chunk_domain2( self, chunk ) :

            # verify content
            self.assertEqual( 10, chunk.order )

            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 1., chunk.coefficients[0] )
            self.assertAlmostEqual( 3., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )

            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -2., chunk.domain.lower_limit )
            self.assertEqual(  4., chunk.domain.upper_limit )

            # verify evaluation
            self.assertAlmostEqual( -1.0      , chunk( -1. ) )
            self.assertAlmostEqual( -0.9999999, chunk( -0.9999999 ) )
            self.assertAlmostEqual( -0.999999 , chunk( -0.999999 ) )
            self.assertAlmostEqual( -0.99999  , chunk( -0.99999 ) )
            self.assertAlmostEqual( -0.9999   , chunk( -0.9999 ) )
            self.assertAlmostEqual( -0.999    , chunk( -0.999 ) )
            self.assertAlmostEqual( -0.99     , chunk( -0.99 ) )
            self.assertAlmostEqual( -0.9      , chunk( -0.9 ) )
            self.assertAlmostEqual( -0.5      , chunk( -0.5 ) )
            self.assertAlmostEqual( -0.05     , chunk( -0.05 ) )
            self.assertAlmostEqual( -0.005    , chunk( -0.005 ) )
            self.assertAlmostEqual( -0.0005   , chunk( -0.0005 ) )
            self.assertAlmostEqual( -0.00005  , chunk( -0.00005 ) )
            self.assertAlmostEqual( -0.000005 , chunk( -0.000005 ) )
            self.assertAlmostEqual( -0.0000005, chunk( -0.0000005 ) )
            self.assertAlmostEqual(  0.0      , chunk(  0. ) )
            self.assertAlmostEqual( +0.0000005, chunk(  0.0000005 ) )
            self.assertAlmostEqual( +0.000005 , chunk(  0.000005 ) )
            self.assertAlmostEqual( +0.00005  , chunk(  0.00005 ) )
            self.assertAlmostEqual( +0.0005   , chunk(  0.0005 ) )
            self.assertAlmostEqual( +0.005    , chunk(  0.005 ) )
            self.assertAlmostEqual( +0.05     , chunk(  0.05 ) )
            self.assertAlmostEqual( +0.5      , chunk(  0.5 ) )
            self.assertAlmostEqual( +0.9      , chunk(  0.9 ) )
            self.assertAlmostEqual( +0.99     , chunk(  0.99 ) )
            self.assertAlmostEqual( +0.999    , chunk(  0.999 ) )
            self.assertAlmostEqual( +0.9999   , chunk(  0.9999 ) )
            self.assertAlmostEqual( +0.99999  , chunk(  0.99999 ) )
            self.assertAlmostEqual( +0.999999 , chunk(  0.999999 ) )
            self.assertAlmostEqual( +0.9999999, chunk(  0.9999999 ) )
            self.assertAlmostEqual( +1.0      , chunk(  1. ) )

            # verify domain comparison
            self.assertEqual( True, chunk.is_inside( -2. ) )
            self.assertEqual( True, chunk.is_inside(  1. ) )
            self.assertEqual( True, chunk.is_inside(  4. ) )

            self.assertEqual( False, chunk.is_contained( -2. ) )
            self.assertEqual( True, chunk.is_contained( 1. ) )
            self.assertEqual( False, chunk.is_contained( 4. ) )

            self.assertEqual( True, chunk.is_same_domain( IntervalDomain( -2., 4. ) ) )
            self.assertEqual( False, chunk.is_same_domain( IntervalDomain( 0., 4. ) ) )
            self.assertEqual( False, chunk.is_same_domain( OpenDomain() ) )

            # verify arithmetic operators
            small = ChebyshevApproximation( -2, 4, [ 3., 0., 1. ] )
            result = ChebyshevApproximation( -2, 4, [ 0. ] )

            result = -chunk
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( -1., result.coefficients[0] )
            self.assertAlmostEqual( -3., result.coefficients[1] )
            self.assertAlmostEqual(  0., result.coefficients[2] )
            self.assertAlmostEqual(  0., result.coefficients[3] )
            self.assertAlmostEqual(  0., result.coefficients[4] )
            self.assertAlmostEqual(  0., result.coefficients[5] )
            self.assertAlmostEqual(  0., result.coefficients[6] )
            self.assertAlmostEqual(  0., result.coefficients[7] )
            self.assertAlmostEqual(  0., result.coefficients[8] )
            self.assertAlmostEqual(  0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -2., result.domain.lower_limit )
            self.assertEqual(  4., result.domain.upper_limit )

            chunk += 2.
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 3., chunk.coefficients[0] )
            self.assertAlmostEqual( 3., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -2., chunk.domain.lower_limit )
            self.assertEqual(  4., chunk.domain.upper_limit )

            chunk -= 2.
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 1., chunk.coefficients[0] )
            self.assertAlmostEqual( 3., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -2., chunk.domain.lower_limit )
            self.assertEqual(  4., chunk.domain.upper_limit )

            chunk += small
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 4., chunk.coefficients[0] )
            self.assertAlmostEqual( 3., chunk.coefficients[1] )
            self.assertAlmostEqual( 1., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -2., chunk.domain.lower_limit )
            self.assertEqual(  4., chunk.domain.upper_limit )

            chunk -= small
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 1., chunk.coefficients[0] )
            self.assertAlmostEqual( 3., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -2., chunk.domain.lower_limit )
            self.assertEqual(  4., chunk.domain.upper_limit )

            chunk *= 2.
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 2., chunk.coefficients[0] )
            self.assertAlmostEqual( 6., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -2., chunk.domain.lower_limit )
            self.assertEqual(  4., chunk.domain.upper_limit )

            chunk /= 2.
            self.assertEqual( 10, chunk.order )
            self.assertEqual( 11, len( chunk.coefficients ) )
            self.assertAlmostEqual( 1., chunk.coefficients[0] )
            self.assertAlmostEqual( 3., chunk.coefficients[1] )
            self.assertAlmostEqual( 0., chunk.coefficients[2] )
            self.assertAlmostEqual( 0., chunk.coefficients[3] )
            self.assertAlmostEqual( 0., chunk.coefficients[4] )
            self.assertAlmostEqual( 0., chunk.coefficients[5] )
            self.assertAlmostEqual( 0., chunk.coefficients[6] )
            self.assertAlmostEqual( 0., chunk.coefficients[7] )
            self.assertAlmostEqual( 0., chunk.coefficients[8] )
            self.assertAlmostEqual( 0., chunk.coefficients[9] )
            self.assertEqual( True, isinstance( chunk.domain, IntervalDomain ) )
            self.assertEqual( -2., chunk.domain.lower_limit )
            self.assertEqual(  4., chunk.domain.upper_limit )

            result = chunk + 2.
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 3., result.coefficients[0] )
            self.assertAlmostEqual( 3., result.coefficients[1] )
            self.assertAlmostEqual( 0., result.coefficients[2] )
            self.assertAlmostEqual( 0., result.coefficients[3] )
            self.assertAlmostEqual( 0., result.coefficients[4] )
            self.assertAlmostEqual( 0., result.coefficients[5] )
            self.assertAlmostEqual( 0., result.coefficients[6] )
            self.assertAlmostEqual( 0., result.coefficients[7] )
            self.assertAlmostEqual( 0., result.coefficients[8] )
            self.assertAlmostEqual( 0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -2., result.domain.lower_limit )
            self.assertEqual(  4., result.domain.upper_limit )

            result = 2. + chunk
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 3., result.coefficients[0] )
            self.assertAlmostEqual( 3., result.coefficients[1] )
            self.assertAlmostEqual( 0., result.coefficients[2] )
            self.assertAlmostEqual( 0., result.coefficients[3] )
            self.assertAlmostEqual( 0., result.coefficients[4] )
            self.assertAlmostEqual( 0., result.coefficients[5] )
            self.assertAlmostEqual( 0., result.coefficients[6] )
            self.assertAlmostEqual( 0., result.coefficients[7] )
            self.assertAlmostEqual( 0., result.coefficients[8] )
            self.assertAlmostEqual( 0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -2., result.domain.lower_limit )
            self.assertEqual(  4., result.domain.upper_limit )

            result = chunk - 2.
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( -1., result.coefficients[0] )
            self.assertAlmostEqual(  3., result.coefficients[1] )
            self.assertAlmostEqual(  0., result.coefficients[2] )
            self.assertAlmostEqual(  0., result.coefficients[3] )
            self.assertAlmostEqual(  0., result.coefficients[4] )
            self.assertAlmostEqual(  0., result.coefficients[5] )
            self.assertAlmostEqual(  0., result.coefficients[6] )
            self.assertAlmostEqual(  0., result.coefficients[7] )
            self.assertAlmostEqual(  0., result.coefficients[8] )
            self.assertAlmostEqual(  0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -2., result.domain.lower_limit )
            self.assertEqual(  4., result.domain.upper_limit )

            result = 2. - chunk
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual(  1., result.coefficients[0] )
            self.assertAlmostEqual( -3., result.coefficients[1] )
            self.assertAlmostEqual(  0., result.coefficients[2] )
            self.assertAlmostEqual(  0., result.coefficients[3] )
            self.assertAlmostEqual(  0., result.coefficients[4] )
            self.assertAlmostEqual(  0., result.coefficients[5] )
            self.assertAlmostEqual(  0., result.coefficients[6] )
            self.assertAlmostEqual(  0., result.coefficients[7] )
            self.assertAlmostEqual(  0., result.coefficients[8] )
            self.assertAlmostEqual(  0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -2., result.domain.lower_limit )
            self.assertEqual(  4., result.domain.upper_limit )

            result = chunk + small
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 4., result.coefficients[0] )
            self.assertAlmostEqual( 3., result.coefficients[1] )
            self.assertAlmostEqual( 1., result.coefficients[2] )
            self.assertAlmostEqual( 0., result.coefficients[3] )
            self.assertAlmostEqual( 0., result.coefficients[4] )
            self.assertAlmostEqual( 0., result.coefficients[5] )
            self.assertAlmostEqual( 0., result.coefficients[6] )
            self.assertAlmostEqual( 0., result.coefficients[7] )
            self.assertAlmostEqual( 0., result.coefficients[8] )
            self.assertAlmostEqual( 0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -2., result.domain.lower_limit )
            self.assertEqual(  4., result.domain.upper_limit )

            result = chunk - small
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( -2., result.coefficients[0] )
            self.assertAlmostEqual(  3., result.coefficients[1] )
            self.assertAlmostEqual( -1., result.coefficients[2] )
            self.assertAlmostEqual(  0., result.coefficients[3] )
            self.assertAlmostEqual(  0., result.coefficients[4] )
            self.assertAlmostEqual(  0., result.coefficients[5] )
            self.assertAlmostEqual(  0., result.coefficients[6] )
            self.assertAlmostEqual(  0., result.coefficients[7] )
            self.assertAlmostEqual(  0., result.coefficients[8] )
            self.assertAlmostEqual(  0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -2., result.domain.lower_limit )
            self.assertEqual(  4., result.domain.upper_limit )

            result = chunk * 2.
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 2., result.coefficients[0] )
            self.assertAlmostEqual( 6., result.coefficients[1] )
            self.assertAlmostEqual( 0., result.coefficients[2] )
            self.assertAlmostEqual( 0., result.coefficients[3] )
            self.assertAlmostEqual( 0., result.coefficients[4] )
            self.assertAlmostEqual( 0., result.coefficients[5] )
            self.assertAlmostEqual( 0., result.coefficients[6] )
            self.assertAlmostEqual( 0., result.coefficients[7] )
            self.assertAlmostEqual( 0., result.coefficients[8] )
            self.assertAlmostEqual( 0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -2., result.domain.lower_limit )
            self.assertEqual(  4., result.domain.upper_limit )

            result = 2. * chunk
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 2., result.coefficients[0] )
            self.assertAlmostEqual( 6., result.coefficients[1] )
            self.assertAlmostEqual( 0., result.coefficients[2] )
            self.assertAlmostEqual( 0., result.coefficients[3] )
            self.assertAlmostEqual( 0., result.coefficients[4] )
            self.assertAlmostEqual( 0., result.coefficients[5] )
            self.assertAlmostEqual( 0., result.coefficients[6] )
            self.assertAlmostEqual( 0., result.coefficients[7] )
            self.assertAlmostEqual( 0., result.coefficients[8] )
            self.assertAlmostEqual( 0., result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -2., result.domain.lower_limit )
            self.assertEqual(  4., result.domain.upper_limit )

            result = chunk / 2.
            self.assertEqual( 10, result.order )
            self.assertEqual( 11, len( result.coefficients ) )
            self.assertAlmostEqual( 0.5, result.coefficients[0] )
            self.assertAlmostEqual( 1.5, result.coefficients[1] )
            self.assertAlmostEqual( 0.0, result.coefficients[2] )
            self.assertAlmostEqual( 0.0, result.coefficients[3] )
            self.assertAlmostEqual( 0.0, result.coefficients[4] )
            self.assertAlmostEqual( 0.0, result.coefficients[5] )
            self.assertAlmostEqual( 0.0, result.coefficients[6] )
            self.assertAlmostEqual( 0.0, result.coefficients[7] )
            self.assertAlmostEqual( 0.0, result.coefficients[8] )
            self.assertAlmostEqual( 0.0, result.coefficients[9] )
            self.assertEqual( True, isinstance( result.domain, IntervalDomain ) )
            self.assertEqual( -2., result.domain.lower_limit )
            self.assertEqual(  4., result.domain.upper_limit )

        # test function : f(x) = x
        def function( x ) : return x

        # the function is approximated on [-1,1]
        chunk = ChebyshevApproximation( lower = -1., upper = 1.,
                                        function = function, order = 10 )

        verify_chunk_domain1( self, chunk )

        # the function is approximated on [-2,4]
        chunk = ChebyshevApproximation( lower = -2., upper = 4.,
                                        function = function, order = 10 )

        verify_chunk_domain2( self, chunk )

if __name__ == '__main__' :

    unittest.main()
